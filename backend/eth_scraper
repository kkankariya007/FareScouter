const puppeteer = require('puppeteer');
require ("dotenv").config();
const express = require('express');
const app = express();
const path = require("path");

app.use(express.json());

const retryOperation = async (operation, retries = 3, delay = 2000) => {
    let attempt = 0;
    while (attempt < retries) {
      try {
        return await operation();
      } catch (error) {
        attempt++;
        console.error(`Attempt ${attempt} failed: ${error.message}`);
        if (attempt < retries) {
        //   console.log(`Retrying in ${delay}ms...`);
          await new Promise(res => setTimeout(res, delay)); // Exponential backoff could be added here
        } else {
          throw error; // If max retries reached, throw error
        }
      }
    }
  };

const result = {};
const url='https://www.coingecko.com/';
(async () => {
    const browser = await puppeteer.launch({
        headless: false, 
        // slowMo: 75, 
        args: ['--start-maximized'],
        defaultViewport:null
    });
    const page = await browser.newPage();
    // console.log(page.viewport())
    // Set a user agent
    await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36');

    // Set cookies
    const cookies = [
        {
            name: 'cookie_name1', 
            value: 'cookie_value1',
            domain: '.bing.com', 
            path: '/', 
            httpOnly: true, 
            secure: true 
        },
        {
            name: 'cookie_name2',
            value: 'cookie_value2',
            domain: '.bing.com',
            path: '/',
            httpOnly: true,
            secure: true
        },
        // Add more cookies as needed
    ];

    await page.setCookie(...cookies);

        try {
            await page.goto(url, { waitUntil: 'domcontentloaded' });

            await page.waitForSelector('.tw-border-y.tw-border-gray-200.dark\\:tw-border-moon-700.tw-divide-y.tw-divide-gray-200.dark\\:tw-divide-moon-700');
        
            const data = await page.evaluate(() => {
                // Select all rows with the data-view-component attribute
                const rows = Array.from(document.querySelectorAll('tr[data-view-component="true"]'));
              
                // Limit to the top 10 rows
                const top10Rows = rows.slice(0, 10);
              
                // Extract only the third column and trim the data
                return top10Rows.map(row => {
                  const cells = row.querySelectorAll('td');
                  
                  // Extract the third column (index 2) and trim everything before the last space
                  const price = cells[2] ? cells[2].innerText.trim() : null;
                  if (price) {
                    const parts = price.split(' '); // Split the price by space
                    parts.pop(); // Remove the last part (currency symbol or last token)
                    return parts.join(' '); // Rejoin everything before the last space
                  }
                  return null;
                });
              });
              const transformArray = (arr) => {
                return arr.map(item => item.toLowerCase().replace(/\s+/g, '-'));
              };
              const transformedArray = transformArray(data);
              console.log(data)
                // Output the transformed array
                console.log(transformedArray);


                for (const name of transformedArray) {

                    await retryOperation(async () => {
                        const coinPage = await browser.newPage();
                        const coinUrl = `https://www.coingecko.com/en/coins/${name}`;
                
                        await coinPage.goto(coinUrl, { waitUntil: 'domcontentloaded' });
                        // await coinPage.waitForSelector('.tw-border-y.tw-border-gray-200.dark\\:tw-border-moon-700.tw-divide-y.tw-divide-gray-200.dark\\:tw-divide-moon-700');
                        await coinPage.waitForSelector('tr[data-view-component="true"]', {
                            timeout: 10000 // 10 seconds timeout, you can adjust this value
                          });
                        // await coinPage.waitForSelector('.tw-border-y.tw-border-gray-200.dark\\:tw-border-moon-700.tw-divide-y.tw-divide-gray-200.dark\\:tw-divide-moon-700');
                
                        const coinData = await coinPage.evaluate(() => {
                          const rows = Array.from(document.querySelectorAll('tr[data-view-component="true"]'));
                          const last10Rows = rows.slice(-10);
                          return last10Rows.map(row => {
                            const cells = row.querySelectorAll('td');
                            const col2 = cells[1] ? cells[1].innerText.trim() : '';
                            const col4 = cells[3] ? cells[3].innerText.trim() : '';
                            const col5 = cells[4] ? cells[4].innerText.trim() : '';
                            return [col2, col4, col5];
                          });
                        });
                        const sortedData = coinData.sort((a, b) => {
                            const priceA = parseFloat(a[2].replace('$', '').replace(',', ''));
                            const priceB = parseFloat(b[2].replace('$', '').replace(',', ''));
                            return priceA - priceB; // Sort in ascending order
                          });
                        result[name] = coinData;
                        console.log(`${name}:`, sortedData);
                      });

    }
    console.log(JSON.stringify(result, null, 2));


            

        } catch (error) {
            if (error.message.includes('429')) {
                console.log('Received 429 error. Retrying after a delay...');
                await new Promise(res => setTimeout(res, 5000)); // Delay before rrying
            } else {
                console.error('An error occurred:', error.message);
            }
        }

    await browser.close();
})();


app.listen(port, () => {
    console.log(`Server is running on http://localhost:${port}`);
});




