const puppeteer = require('puppeteer');
require('dotenv').config();
const express = require('express');
const app = express();
const path = require('path');

app.use(express.json());

const retryOperation = async (operation, retries = 3, delay = 2000) => {
  let attempt = 0;
  while (attempt < retries) {
    try {
      return await operation();
    } catch (error) {
      attempt++;
      console.error(`Attempt ${attempt} failed: ${error.message}`);
      if (attempt < retries) {
        await new Promise(res => setTimeout(res, delay)); 
      } else {
        throw error; 
      }
    }
  }
};

const scrapeData = async () => {
  const result = {};
  const url = 'https://www.coingecko.com/';

  // Launch Puppeteer browser
  const browser = await puppeteer.launch({
    headless: false, 
    args: ['--start-maximized'],
    defaultViewport: null
  });

  const page = await browser.newPage();

  // Set a user agent
  await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36');

  const cookies = [
    {
      name: 'cookie_name1',
      value: 'cookie_value1',
      domain: '.bing.com',
      path: '/',
      httpOnly: true,
      secure: true
    },
    {
      name: 'cookie_name2',
      value: 'cookie_value2',
      domain: '.bing.com',
      path: '/',
      httpOnly: true,
      secure: true
    }
  ];
  await page.setCookie(...cookies);

  try {
    await page.goto(url, { waitUntil: 'domcontentloaded' });

    await page.waitForSelector('tr[data-view-component="true"]', { timeout: 10000 });

    const data = await page.evaluate(() => {
      const rows = Array.from(document.querySelectorAll('tr[data-view-component="true"]'));

      const top10Rows = rows.slice(0, 10);

      return top10Rows.map(row => {
        const cells = row.querySelectorAll('td');
        const price = cells[2] ? cells[2].innerText.trim() : null;
        if (price) {
          const parts = price.split(' '); // Split the price by space
          parts.pop(); // Remove the last part (currency symbol or last token)
          return parts.join(' '); // Rejoin everything before the last space
        }
        return null;
      });
    });

    const transformArray = (arr) => arr.map(item => item.toLowerCase().replace(/\s+/g, '-'));
    const transformedArray = transformArray(data);

    for (const name of transformedArray) {
      await retryOperation(async () => {
        const coinPage = await browser.newPage();
        const coinUrl = `https://www.coingecko.com/en/coins/${name}`;

        await coinPage.goto(coinUrl, { waitUntil: 'domcontentloaded' });
        await coinPage.waitForSelector('tr[data-view-component="true"]', { timeout: 10000 });

        const coinData = await coinPage.evaluate(() => {
          const rows = Array.from(document.querySelectorAll('tr[data-view-component="true"]'));
          const last10Rows = rows.slice(-10);
          return last10Rows.map(row => {
            const cells = row.querySelectorAll('td');
            const col2 = cells[1] ? cells[1].innerText.trim() : '';
            const col4 = cells[3] ? cells[3].innerText.trim() : '';
            const col5 = cells[4] ? cells[4].innerText.trim() : '';
            return [col2, col4, col5];
          });
        });

        const sortedData = coinData.sort((a, b) => {
          const priceA = parseFloat(a[2].replace('$', '').replace(',', ''));
          const priceB = parseFloat(b[2].replace('$', '').replace(',', ''));
          return priceA - priceB; // Sort in ascending order
        });
        const formattedName = name.toUpperCase().replace(/-/g, ' ');

        result[formattedName] = sortedData;
      });
    }

    await browser.close();
    return result;

  } catch (error) {
    console.error('Error scraping data:', error.message);
    await browser.close();
    throw error;
  }
};

app.get('/scrape', async (req, res) => {
  try {
    const data = await scrapeData();
    res.json(data); 
  } catch (error) {
    res.status(500).json({ error: 'Failed to scrape data', message: error.message });
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});
